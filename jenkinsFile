pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('4af24fb6-77b4-453b-b750-a3b2771dfde9') // Se asume que este es un token de GitHub
        API_URL = 'http://localhost:8080/actividades'
    }

    stages {
        stage('Clonar Repositorio') {
            steps {
                git url: 'https://github.com/GAbriElaJnbg30/Testing_ApiRest.git', credentialsId: "${GITHUB_CREDENTIALS}"
            }
        }

        stage('Ejecutar Contenedor') {
            steps {
                script {
                    // Detiene el contenedor si está en ejecución
                    sh """
                    docker stop apirestgo-api-go-container || true
                    docker rm apirestgo-api-go-container || true
                    """
                    
                    // Inicia el contenedor a partir de la imagen ya construida
                    def dockerRunCmd = "docker run -d --name apirestgo-api-go-container -p 8080:8080 apirestgo-api-go:latest"
                    try {
                        sh dockerRunCmd
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Error al iniciar el contenedor Docker: ${e.message}"
                    }
                }
            }
        }

        stage('Ejecutar Pruebas de API') {
            steps {
                script {
                    // Realiza una solicitud GET a la API
                    try {
                        echo "Probando conexión a la API..."
                        def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' -X GET '${API_URL}'", returnStdout: true).trim()

                        if (response != '200') {
                            error "La API no respondió correctamente. Código de estado: ${response}"
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Error al ejecutar pruebas de la API: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline terminado.'
            // Detiene y elimina el contenedor después del pipeline
            sh "docker stop apirestgo-api-go-container || true"
            sh "docker rm apirestgo-api-go-container || true"
        }
        success {
            echo 'Las pruebas de la API se completaron con éxito.'
        }
        failure {
            echo 'Hubo un error en las pruebas de la API.'
        }
    }
}
